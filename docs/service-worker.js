"use strict";var precacheConfig=[["/ALSET-reactGame-ui/index.html","540eaac5a32e25519a104cf0398bd8a1"],["/ALSET-reactGame-ui/static/css/main.f201afcb.css","d3e649b2e656de3bc63de5740464d1ce"],["/ALSET-reactGame-ui/static/js/main.eeabda3c.js","0c26e17fd5439572e057f61463627732"],["/ALSET-reactGame-ui/static/media/blonde.27cbfbeb.png","27cbfbeb52c9c8ef0e87444a84583940"],["/ALSET-reactGame-ui/static/media/brunette.cda0c691.png","cda0c691a264e3e83ba34513111f473d"],["/ALSET-reactGame-ui/static/media/bush.97363ee6.png","97363ee68e13dad17059c1d52ac5d010"],["/ALSET-reactGame-ui/static/media/character-blonde.27cbfbeb.png","27cbfbeb52c9c8ef0e87444a84583940"],["/ALSET-reactGame-ui/static/media/character-brunette.cda0c691.png","cda0c691a264e3e83ba34513111f473d"],["/ALSET-reactGame-ui/static/media/concrete.71d777ff.jpg","71d777ff6b8f9e9281932346d4a56252"],["/ALSET-reactGame-ui/static/media/fir-tree.bc24c86d.png","bc24c86d06c0f141ad726408cf65eb8f"],["/ALSET-reactGame-ui/static/media/gem.fd48ef93.png","fd48ef93b2ba801987e023d4578c3928"],["/ALSET-reactGame-ui/static/media/gnome1.ad077148.png","ad07714848fc81c5673d5e819626a14e"],["/ALSET-reactGame-ui/static/media/gnome2.d4188874.png","d4188874919b2877cff9c326d3e40506"],["/ALSET-reactGame-ui/static/media/grass.5cc318d6.jpg","5cc318d692d183de9ff24c5e64c98519"],["/ALSET-reactGame-ui/static/media/palm-tree.4202d258.png","4202d25898282538f08761715f35dcc5"],["/ALSET-reactGame-ui/static/media/stone1.106982ee.png","106982ee0d430c31e500b01de11e1a66"],["/ALSET-reactGame-ui/static/media/stone2.2b60fc02.png","2b60fc028901ed38be5393728d951468"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(e){return e.redirected?("body"in e?Promise.resolve(e.body):e.blob()).then(function(t){return new Response(t,{headers:e.headers,status:e.status,statusText:e.statusText})}):Promise.resolve(e)},createCacheKey=function(e,t,a,n){var r=new URL(e);return n&&r.pathname.match(n)||(r.search+=(r.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),r.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,t){var a=new URL(e);return a.hash="",a.search=a.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return t.every(function(t){return!t.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),a.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],n=new URL(t,self.location),r=createCacheKey(n,hashParamName,a,/\.\w{8}\./);return[n.toString(),r]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(a){if(!t.has(a)){var n=new Request(a,{credentials:"same-origin"});return fetch(n).then(function(t){if(!t.ok)throw new Error("Request for "+a+" returned a response with status "+t.status);return cleanResponse(t).then(function(t){return e.put(a,t)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(a){return Promise.all(a.map(function(a){if(!t.has(a.url))return e.delete(a)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var t,a=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching),n="index.html";(t=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,n),t=urlsToCacheKeys.has(a));var r="/ALSET-reactGame-ui/index.html";!t&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(a=new URL(r,self.location).toString(),t=urlsToCacheKeys.has(a)),t&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(t){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,t),fetch(e.request)}))}});